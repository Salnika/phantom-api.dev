{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Phantom API - Self-Generating Backend","text":"<p>A dynamic backend system that automatically creates API endpoints, database tables, and validation schemas based on JSON metadata definitions.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Dynamic API: Single route <code>/api/:resource/:action</code> handles all operations</li> <li>Front-End as Model: Tables and schemas defined automaticaly by calling the backend.</li> <li>Advanced Relations: Foreign keys, cascading deletes, self-referencing tables</li> <li>Rich Field Types: String, text, integer, boolean, datetime, enum, JSON, email</li> <li>Zod Validation: Automatic schema generation and validation</li> <li>Role-based Auth: JWT authentication with <code>anon</code>, <code>user</code>, <code>admin</code> roles</li> <li>Admin Interface: React-based admin panel with logs viewer</li> <li>Client Package: TypeScript NPM package for frontend integration</li> <li>Process Management: PM2 ecosystem for production deployment</li> <li>Structured Logging: Pino logger with file rotation and admin interface</li> <li>Docker: Containerized backend with persistent SQLite storage</li> </ul>"},{"location":"#project-structure","title":"Project Structure","text":"<pre><code>\u251c\u2500\u2500 phantom-api-backend/  # Express server with dynamic API\n\u2502   \u251c\u2500\u2500 src/             # TypeScript source code\n\u2502   \u251c\u2500\u2500 meta/            # JSON schema\n\u2502   \u251c\u2500\u2500 logs/            # Application and error logs\n\u2502   \u2514\u2500\u2500 data/            # SQLite database files\n\u251c\u2500\u2500 admin-interface/      # React admin panel\n\u251c\u2500\u2500 phantom-api/          # NPM package for frontend integration\n\u251c\u2500\u2500 phantom-api-demo/    # Vite React demo application\n\u251c\u2500\u2500 website/             # Marketing website\n\u251c\u2500\u2500 public-doc/          # MkDocs documentation\n\u251c\u2500\u2500 ecosystem.config.js  # PM2 process configuration\n\u251c\u2500\u2500 Dockerfile           # Backend containerization\n\u2514\u2500\u2500 docker-compose.yml   # Multi-service orchestration\n</code></pre>"},{"location":"#quick-start","title":"Quick Start","text":""},{"location":"#1-install-phantom-api","title":"1. Install Phantom Api","text":"<pre><code>yarn install phantom-api\n</code></pre>"},{"location":"#2-environment-setup","title":"2. Environment Setup","text":"<p>Copy the example environment file and configure it: <pre><code>cp .env.example .env\n</code></pre></p> <p>Edit <code>.env</code> with your configuration: <pre><code># Server Configuration\nPORT=3000\nNODE_ENV=development\n\n# JWT Secret Key (CHANGE THIS IN PRODUCTION!)\nJWT_SECRET=your-super-secret-jwt-key-change-this-in-production\n\n# Database Configuration\nDB_PATH=./data/phantom.db\n\n# Admin Panel Configuration\nADMIN_EMAIL=admin@phantom-api.com\nADMIN_PASSWORD=admin123\n</code></pre></p>"},{"location":"#3-start-all-services-with-pm2","title":"3. Start All Services with PM2","text":"<pre><code># Install PM2 globally\nyarn add -g pm2\n\n# Start all services\nyarn pm2:start\n\n# Check status\npm2 status\n\n# View logs\nyarn pm2:logs\n</code></pre> <p>Services will run on: - Backend: http://localhost:3000 - API - Admin Interface: http://localhost:5173 - Admin Panel - Demo Frontend: http://localhost:5174 - Example application - Website: http://localhost:5175 - Landing Page - Documentation http://localhost:3000 - Docs</p>"},{"location":"#4-alternative-start-individual-services","title":"4. Alternative: Start Individual Services","text":"<pre><code># Backend only\ncd phantom-api-backend &amp;&amp; yarn dev\n\n# Admin interface only  \ncd admin-interface &amp;&amp; yarn dev\n\n# Demo frontend only\ncd templates/todolist-phantom-api &amp;&amp; yarn dev\n</code></pre>"},{"location":"#5-use-client-package","title":"5. Use Client Package","text":"<pre><code>import { setEndpoint, setToken, resource } from 'phantom-api';\n\n// Configure\nsetEndpoint('http://localhost:3000');\nsetToken('your-jwt-token'); // optional\n\n// Use resources\nconst users = resource('User');\nawait users.create({ email: 'test@example.com', name: 'John' });\nconst allUsers = await users.read();\n</code></pre> <p>More at Client Package Doc</p>"},{"location":"#docker-deployment","title":"Docker Deployment","text":"Quick StartVerify Setup <pre><code># Copy environment template\ncp .env.example .env\n\n# Generate secure JWT secret\nopenssl rand -base64 32\n# Copy to JWT_SECRET in .env\n\n# Start services\ndocker-compose up --build -d\n</code></pre> <pre><code># Check health\ncurl http://localhost:3000/health\n\n# Access admin interface\nopen http://localhost:3000/admin\n</code></pre> <p>For detailed Docker configuration, see Docker Deployment.</p>"},{"location":"#how-it-works","title":"How It Works","text":"<ol> <li>Request: Frontend sends POST to <code>/api/Resource/action</code></li> <li>Validation: Zod schema auto-generated/validated</li> <li>Permissions: Checked against <code>meta/Resource.json</code></li> <li>Database: Table auto-created if needed</li> <li>Response: JSON with success/error status</li> </ol> <p>The system use your frontend data structure and automatically: - Creates SQLite tables with appropriate column types - Generates Zod validation schemas - Sets up permission defaults - Provides admin interface for management</p> <p>Perfect for rapid prototyping and dynamic applications!</p>"},{"location":"api-reference/","title":"API Reference","text":""},{"location":"api-reference/#references-api","title":"R\u00e9f\u00e9rences API","text":"<ul> <li>backend-api</li> <li>client-package</li> </ul>"},{"location":"backend-api/","title":"\ud83d\ude80 API Backend","text":"<p>The Phantom API backend provides a dynamic REST API that automatically generates endpoints, database tables, and validation schemas from JSON metadata definitions.</p>"},{"location":"backend-api/#key-concepts","title":"Key Concepts","text":"<ul> <li>Single Endpoint Model: All operations use <code>/api/:resource/:action</code>.</li> <li>Metadata-Driven: Database schema defined in <code>phantom-api-backend/meta/*.json</code> files.</li> <li>Auto-Generated Tables: SQLite tables created automatically based on the metadata.</li> <li>Zod Validation: Automatic schema validation driven by the field definitions.</li> <li>Role-Based Permissions: JWT authentication with the roles <code>anon</code>, <code>user</code>, <code>admin</code>.</li> <li>Dynamic Schema Evolution: Tables automatically updated when the metadata changes.</li> </ul>"},{"location":"backend-api/#api-examples","title":"API Examples","text":""},{"location":"backend-api/#fetch-a-resources-schema","title":"Fetch a Resource\u2019s Schema","text":"<p>Retrieve the field definitions and metadata for any resource.</p> cURL <pre><code>curl -X GET \\\n  http://localhost:3000/api/User/schema \\\n  -H \"Authorization: Bearer &lt;YOUR_JWT_TOKEN&gt;\"\n</code></pre> phantom-api <pre><code>import { createClient } from 'phantom-api';\n\nconst client = createClient({ baseURL: 'http://localhost:3000' });\nconst userResource = client.resource('User');\nconst schema = await userResource.getFields();\nconsole.log('User Schema:', schema);\n</code></pre>"},{"location":"backend-api/#create-a-resource","title":"Create a Resource","text":"<p>Create new resources with automatic ID generation and validation.</p> cURL <pre><code>curl -X POST \\\n  http://localhost:3000/api/User \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer &lt;YOUR_JWT_TOKEN&gt;\" \\\n  -d '{\n    \"name\": \"John Doe\",\n    \"email\": \"john.doe@example.com\"\n  }'\n</code></pre> phantom-api <pre><code>const newUser = await client.resource('User').create({\n  name: 'John Doe',\n  email: 'john.doe@example.com'\n});\n</code></pre>"},{"location":"backend-api/#read-resources","title":"Read Resources","text":"<p>Fetch resources with flexible query options.</p> cURL <pre><code>curl -X GET \\\n  \"http://localhost:3000/api/User?limit=10&amp;where[isActive]=true&amp;sort=-createdAt\" \\\n  -H \"Authorization: Bearer &lt;YOUR_JWT_TOKEN&gt;\"\n</code></pre> phantom-api <pre><code>const users = await client.resource('User').read({\n  limit: 10,\n  where: { isActive: true },\n  sort: ['-createdAt']\n});\n</code></pre>"},{"location":"backend-api/#update-a-resource","title":"Update a Resource","text":"<p>Update an existing resource by its ID.</p> cURL <pre><code>curl -X PUT \\\n  http://localhost:3000/api/User/user_abc123 \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer &lt;YOUR_JWT_TOKEN&gt;\" \\\n  -d '{\n    \"name\": \"John Smith\"\n  }'\n</code></pre> phantom-api <pre><code>const updatedUser = await client.resource('User').update({\n  id: 'user_abc123',\n  name: 'John Smith'\n});\n</code></pre>"},{"location":"backend-api/#delete-a-resource","title":"Delete a Resource","text":"<p>Delete a resource by its ID.</p> cURL <pre><code>curl -X DELETE \\\n  http://localhost:3000/api/User/user_abc123 \\\n  -H \"Authorization: Bearer &lt;YOUR_JWT_TOKEN&gt;\"\n</code></pre> phantom-api <pre><code>await client.resource('User').delete('user_abc123');\n</code></pre>"},{"location":"backend-api/#special-operations","title":"Special Operations","text":""},{"location":"backend-api/#createifnotexists","title":"<code>createIfNotExists</code>","text":"<p>Create a resource only if it does not already exist.</p> cURL <pre><code>curl -X POST \\\n  http://localhost:3000/api/User/createIfNotExists \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer &lt;YOUR_JWT_TOKEN&gt;\" \\\n  -d '{\n    \"filter\": { \"email\": \"john.doe@example.com\" },\n    \"data\": { \"email\": \"john.doe@example.com\", \"name\": \"John Doe\" }\n  }'\n</code></pre> phantom-api <pre><code>const result = await client.resource('User').safeCreate({\n  filter: { email: 'john.doe@example.com' },\n  data: { email: 'john.doe@example.com', name: 'John Doe' }\n});\n</code></pre>"},{"location":"backend-api/#updateifexists","title":"<code>updateIfExists</code>","text":"<p>Update a resource only if it exists.</p> cURL <pre><code>curl -X POST \\\n  http://localhost:3000/api/User/updateIfExists \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer &lt;YOUR_JWT_TOKEN&gt;\" \\\n  -d '{\n    \"filter\": { \"email\": \"john.doe@example.com\" },\n    \"data\": { \"name\": \"John Updated\" }\n  }'\n</code></pre> phantom-api <pre><code>const result = await client.resource('User').safeUpdate({\n  filter: { email: 'john.doe@example.com' },\n  data: { name: 'John Updated' }\n});\n</code></pre>"},{"location":"backend-api/#authentication-routes","title":"Authentication Routes","text":""},{"location":"backend-api/#post-authsetup-create-first-admin-user","title":"<code>POST /auth/setup</code> \u2014 Create First Admin User","text":"<p>Creates the first admin account for the system. This endpoint works only if no admin user already exists.</p> cURL <pre><code>curl -X POST \\\n  http://localhost:3000/auth/setup \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"email\": \"admin@example.com\",\n    \"password\": \"StrongPassw0rd!\",\n    \"name\": \"Super Admin\"\n  }'\n</code></pre> <p>Response (example):</p> <pre><code>{\n  \"success\": true,\n  \"message\": \"Admin user created successfully\",\n  \"user\": {\n    \"id\": \"user_abc123\",\n    \"email\": \"admin@example.com\",\n    \"name\": \"Super Admin\",\n    \"role\": \"admin\"\n  }\n}\n</code></pre> <p>\ud83d\udca1 Note: After creating the first admin, you can log in via <code>/auth/login</code> to manage the system.</p>"},{"location":"backend-api/#batch-operations","title":"Batch Operations","text":"<p>Execute multiple operations in a single request.</p> cURL <pre><code>curl -X POST \\\n  http://localhost:3000/api/batch \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer &lt;YOUR_JWT_TOKEN&gt;\" \\\n  -d '{\n    \"requests\": [\n      { \"resource\": \"User\", \"action\": \"create\", \"data\": { \"name\": \"Batch User\" } },\n      { \"resource\": \"Post\", \"action\": \"read\", \"data\": { \"limit\": 5 } }\n    ]\n  }'\n</code></pre> phantom-api <pre><code>const results = await client.batch([\n  { resource: 'User', action: 'create', data: { name: 'Batch User' } },\n  { resource: 'Post', action: 'read', data: { limit: 5 } }\n]);\n</code></pre>"},{"location":"client-package/","title":"\ud83d\udce6 Client Package (<code>phantom-api</code>)","text":"<p>The <code>phantom-api</code> NPM package provides a TypeScript SDK for seamless frontend integration with the Phantom API backend.</p>"},{"location":"client-package/#installation","title":"Installation","text":"<pre><code>npm install phantom-api\n# or\nyarn add phantom-api\n</code></pre>"},{"location":"client-package/#quick-start","title":"Quick Start","text":"<pre><code>import { createClient } from 'phantom-api';\n\n// 1. Create a client instance\nconst client = createClient({\n  baseURL: 'http://localhost:3000',\n  token: 'your-jwt-token' // optional\n});\n\n// 2. Access a resource\nconst userResource = client.resource('User');\n\n// 3. Use CRUD operations\nconst newUser = await userResource.create({ email: 'user@example.com', name: 'John Doe' });\nconst allUsers = await userResource.read();\n</code></pre>"},{"location":"client-package/#features","title":"Features","text":"<ul> <li>Type-Safe: Full TypeScript support with autocompletion.</li> <li>Resource-Based: Intuitive API matching backend resources.</li> <li>Error Handling: Consistent error responses and handling.</li> <li>Batch Operations: Multiple API calls in a single request.</li> <li>Authentication: JWT and CSRF token management.</li> <li>Flexible Queries: Advanced filtering, sorting, and pagination.</li> </ul>"},{"location":"client-package/#examples","title":"Examples","text":""},{"location":"client-package/#configuration","title":"Configuration","text":"<p>The recommended approach is to create a dedicated client instance.</p> <pre><code>import { createClient } from 'phantom-api';\n\n// Configure the client depending on the environment\nconst baseURL = process.env.NODE_ENV === 'production'\n  ? 'https://api.yourapp.com'\n  : 'http://localhost:3000';\n\nconst client = createClient({ baseURL });\n\n// Set the token from localStorage or an environment variable\nconst token = localStorage.getItem('auth_token');\nif (token) {\n  client.setToken(token);\n}\n</code></pre>"},{"location":"client-package/#resource-operations","title":"Resource Operations","text":""},{"location":"client-package/#create-a-resource","title":"Create a Resource","text":"<pre><code>const userResource = client.resource('User');\n\ntry {\n  const newUser = await userResource.create({\n    name: 'Jane Doe',\n    email: 'jane.doe@example.com',\n    isActive: true\n  });\n  console.log('User created:', newUser);\n} catch (error) {\n  console.error('Failed to create user:', error.message);\n}\n</code></pre>"},{"location":"client-package/#read-resources","title":"Read Resources","text":"<p>Fetch resources with flexible query options.</p> <p>Get all resources</p> <pre><code>const allUsers = await userResource.read();\n</code></pre> <p>Get a single resource by ID</p> <pre><code>const user = await userResource.read({ id: 'user_abc123' });\n</code></pre> <p>Advanced query</p> <pre><code>const activeUsers = await userResource.read({\n  where: {\n    isActive: true,\n    age: { gte: 18 },\n    role: { in: ['admin', 'editor'] }\n  },\n  sort: ['-createdAt'],\n  limit: 20,\n  offset: 0,\n  select: ['id', 'name', 'email', 'role'],\n  populate: ['profile']\n});\n</code></pre>"},{"location":"client-package/#update-a-resource","title":"Update a Resource","text":"<pre><code>try {\n  const updatedUser = await userResource.update({\n    id: 'user_abc123',\n    name: 'Jane Smith'\n  });\n  console.log('User updated:', updatedUser);\n} catch (error) {\n  console.error('Update failed:', error.message);\n}\n</code></pre>"},{"location":"client-package/#delete-a-resource","title":"Delete a Resource","text":"<pre><code>try {\n  await userResource.delete('user_abc123');\n  console.log('User successfully deleted');\n} catch (error) {\n  console.error('Deletion failed:', error.message);\n}\n</code></pre>"},{"location":"client-package/#batch-operations","title":"Batch Operations","text":"<p>Execute multiple operations in one request for better performance.</p> <pre><code>const results = await client.batch([\n  {\n    resource: 'User',\n    action: 'create',\n    data: { name: 'John Doe', email: 'john@example.com' }\n  },\n  {\n    resource: 'Post',\n    action: 'read',\n    data: { limit: 5 }\n  }\n]);\n\nresults.forEach(result =&gt; {\n  if (result.success) {\n    console.log('Operation succeeded:', result.data);\n  } else {\n    console.error('Operation failed:', result.error);\n  }\n});\n</code></pre>"},{"location":"client-package/#advanced-methods","title":"Advanced Methods","text":""},{"location":"client-package/#safecreate","title":"<code>safeCreate</code>","text":"<p>Creates a new entry only if no matching resource exists.</p> <pre><code>await client.resource('User').safeCreate({\n  filter: { email: 'a@b.com' },\n  data: { email: 'a@b.com', name: 'Alex' }\n});\n</code></pre>"},{"location":"client-package/#safeupdate","title":"<code>safeUpdate</code>","text":"<p>Updates an existing entry only if a matching resource is found.</p> <pre><code>await client.resource('User').safeUpdate({\n  filter: { email: 'a@b.com' },\n  data: { name: 'Alex Smith' }\n});\n</code></pre>"},{"location":"client-package/#error-handling","title":"Error Handling","text":"<p>The client manages errors in a structured way. The built-in Axios interceptor logs errors.</p> <pre><code>try {\n  await client.resource('User').create({ email: 'invalid-email' });\n} catch (error) {\n  // Error is already logged by the client's interceptor\n  // You can add custom error handling here\n  if (error.response?.status === 400) {\n    alert('Invalid data. Please check the fields.');\n  }\n}\n</code></pre>"},{"location":"client-package/#react-integration","title":"React Integration","text":"<p>Example of a React hook for resource management.</p> <pre><code>import { useState, useEffect, useCallback } from 'react';\nimport { PhantomAPIClient } from 'phantom-api'; // Ensure client is initialized elsewhere\n\nconst client = new PhantomAPIClient({ baseURL: 'http://localhost:3000' });\n\nfunction useResource&lt;T&gt;(resourceName: string) {\n  const [data, setData] = useState&lt;T[]&gt;([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState&lt;string | null&gt;(null);\n\n  const resource = client.resource&lt;T&gt;(resourceName);\n\n  const fetchData = useCallback(async (query = {}) =&gt; {\n    setLoading(true);\n    setError(null);\n    try {\n      const result = await resource.read(query);\n      setData(Array.isArray(result) ? result : [result]);\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  }, [resource]);\n\n  useEffect(() =&gt; {\n    fetchData();\n  }, [fetchData]);\n\n  // ... other functions (create, update, delete)\n\n  return { data, loading, error, refresh: fetchData };\n}\n\n// Usage in a component\nfunction UserList() {\n  const { data: users, loading, error } = useResource('User');\n\n  if (loading) return &lt;div&gt;Loading...&lt;/div&gt;;\n  if (error) return &lt;div&gt;Error: {error}&lt;/div&gt;;\n\n  return (\n    &lt;ul&gt;\n      {users.map(user =&gt; &lt;li key={user.id}&gt;{user.name}&lt;/li&gt;)}\n    &lt;/ul&gt;\n  );\n}\n</code></pre>"},{"location":"interface-admin/","title":"\ud83d\udee0\ufe0f Admin Interface","text":"<p>The Phantom API includes a modern React-based admin interface for managing resources, viewing logs, and generating API tokens.</p>"},{"location":"interface-admin/#features","title":"Features","text":"<ul> <li>Resource Management: View, create, edit, and delete all resources</li> <li>Schema Editor: Modify field definitions and permissions via JSON</li> <li>API Token Management: Generate JWT tokens with specific roles and expiration</li> <li>Log Viewer: Real-time application and error logs</li> <li>User Management: Admin authentication and role-based access</li> <li>Responsive Design: Modern UI built with React and TypeScript</li> </ul>"},{"location":"interface-admin/#access-and-authentication","title":"Access and Authentication","text":"<p>The admin interface is integrated into the backend and accessible at <code>/admin</code>.</p>"},{"location":"interface-admin/#examples","title":"Examples","text":""},{"location":"interface-admin/#getting-started","title":"Getting Started","text":""},{"location":"interface-admin/#accessing-the-interface","title":"Accessing the Interface","text":"<p>With the backend running, access the admin interface at:</p> <pre><code>http://localhost:3000/admin\n</code></pre>"},{"location":"interface-admin/#default-login","title":"Default Login","text":"<p>Use the default admin credentials (configurable via environment variables):</p> <ul> <li>Email: <code>admin@phantom-api.com</code></li> <li>Password: <code>admin123</code></li> </ul> <p>Security Note: Change these credentials in production by updating your <code>.env</code> file.</p>"},{"location":"interface-admin/#core-features","title":"Core Features","text":""},{"location":"interface-admin/#resource-management","title":"Resource Management","text":"<p>View Resources: Browse all available resources (tables) and their data - Paginated data tables - Search and filter capabilities - Sort by any column - Export data to CSV/JSON</p> <p>Create Records: Add new entries with form validation - Auto-generated forms based on schema - Real-time validation - Relationship selection for foreign keys</p> <p>Edit Records: Update existing entries - Inline editing capabilities - History tracking - Batch operations</p> <p>Delete Records: Remove entries with cascade handling - Confirmation dialogs - Soft delete options - Cascade delete warnings</p>"},{"location":"interface-admin/#schema-management","title":"Schema Management","text":"<p>View Schema: Examine current field definitions and constraints <pre><code>{\n  \"fields\": {\n    \"name\": { \"type\": \"string\", \"required\": true },\n    \"email\": { \"type\": \"email\", \"unique\": true }\n  },\n  \"permissions\": {\n    \"create\": [\"user\", \"admin\"],\n    \"read\": [\"anon\", \"user\", \"admin\"]\n  }\n}\n</code></pre></p>"},{"location":"interface-admin/#api-token-management","title":"API Token Management","text":"<p>Generate Tokens: Create JWT tokens for API access</p> Admin InterfaceAPI Call <ol> <li>Navigate to \"API Tokens\" section</li> <li>Click \"Generate New Token\"</li> <li>Select role: <code>anon</code>, <code>user</code>, or <code>admin</code></li> <li>Set expiration (optional)</li> <li>Copy token for use in applications</li> </ol> <pre><code>curl -X POST \\\n  http://localhost:3000/auth/login \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"email\": \"admin@phantom-api.com\",\n    \"password\": \"admin123\"\n  }'\n</code></pre> <p>Token Roles: - anon: Read-only access to public resources - user: Can create, read, update own resources - admin: Full access to all operations</p> <p>Token Management (Not implemented yet): - View active tokens - Revoke tokens - Set expiration dates - Monitor token usage</p>"},{"location":"interface-admin/#log-viewer","title":"Log Viewer","text":"<p>Application Logs: View real-time server logs - Error logs with stack traces - API request logs - Database operation logs - Security audit logs</p> <p>Log Features: - Real-time updates - Log level filtering (error, warn, info, debug) - Search and filter - Download log files</p>"},{"location":"interface-admin/#advanced-features","title":"Advanced Features","text":""},{"location":"interface-admin/#bulk-operations","title":"Bulk Operations","text":"<ul> <li>Bulk Import: Upload CSV/JSON files to import data</li> <li>Bulk Export: Export filtered datasets</li> <li>Bulk Delete: Delete multiple records with confirmation</li> <li>Bulk Update: Update multiple records simultaneously</li> </ul>"},{"location":"interface-admin/#relationship-management","title":"Relationship Management","text":"<ul> <li>Visual Relationships: See connections between resources</li> <li>Cascade Operations: Understand delete impacts</li> <li>Relationship Editor: Modify foreign key constraints</li> </ul>"},{"location":"interface-admin/#monitoring-dashboard-not-implemented-yet","title":"Monitoring Dashboard (not implemented Yet)","text":"<ul> <li>API Usage: Request counts and response times</li> <li>Resource Statistics: Record counts and growth</li> <li>System Health: Memory, CPU, and database metrics</li> <li>User Activity: Login attempts and API usage</li> </ul>"},{"location":"interface-admin/#security-features","title":"Security Features","text":""},{"location":"interface-admin/#role-based-access","title":"Role-Based Access","text":"<ul> <li>Admin Authentication: Secure login system</li> <li>Session Management: Automatic logout and session tokens</li> <li>Permission Checks: UI adapts based on user permissions</li> </ul>"},{"location":"interface-admin/#data-protection","title":"Data Protection","text":"<ul> <li>Input Sanitization: Prevent XSS and injection attacks</li> <li>CSRF Protection: Secure form submissions</li> <li>Rate Limiting: Prevent abuse and brute force attacks</li> </ul>"},{"location":"interface-admin/#configuration","title":"Configuration","text":""},{"location":"interface-admin/#environment-variables","title":"Environment Variables","text":"<p>Configure the admin interface via <code>.env</code>:</p> <pre><code># Admin Credentials\nADMIN_EMAIL=your-admin@company.com\nADMIN_PASSWORD=secure-password\n\n# Interface Settings\nADMIN_SESSION_TIMEOUT=3600\nADMIN_LOGS_RETENTION=30\n</code></pre>"},{"location":"migrations/","title":"Database Migrations","text":"<p>This document explains how to manage database schema changes using the project\u2019s migration tools.</p>"},{"location":"migrations/#generate-a-migration-phantom-migration-pull","title":"Generate a Migration: <code>phantom-migration pull</code>","text":"<p>This command generates new migration files by detecting differences between your resource meta-definitions (<code>phantom-api-backend/meta/*.json</code>) and the current state of the SQLite database (<code>phantom.db</code>).</p> <p>Usage Example:</p> Command<pre><code>npx phantom-migration pull\n</code></pre> <p>Expected Behavior:</p> <ul> <li>The CLI (<code>phantom-api</code>) sends a request to your running backend.</li> <li> <p>The backend:</p> </li> <li> <p>Reads the meta-definitions in <code>phantom-api-backend/meta/</code>.</p> </li> <li>Compares them with the actual database structure.</li> <li>Generates a TypeScript migration file in <code>phantom-api-backend/migrations/</code> if changes are detected.</li> </ul> <p>Example Generated File:</p> Migration Example<pre><code>// File automatically generated by the backend.\n// Do not modify manually unless necessary.\n\nimport { Migration } from 'drizzle-orm/migrator';\n\nexport default {\n  up: async (db: any) =&gt; {\n    await db.exec(`\n      CREATE TABLE IF NOT EXISTS your_table_name (\n        id TEXT PRIMARY KEY NOT NULL,\n        field1 TEXT,\n        field2 INTEGER\n      );\n    `);\n  },\n  down: async (db: any) =&gt; {\n    await db.exec(`DROP TABLE IF EXISTS your_table_name;`);\n  },\n} as Migration;\n</code></pre> <ul> <li>The <code>up</code> function applies the changes.</li> <li>The <code>down</code> function rolls them back.</li> </ul>"},{"location":"migrations/#apply-a-migration","title":"Apply a Migration","text":"<p>This command applies a specific migration file to the database via the backend.</p> <p>Usage Example:</p> <pre><code># Replace &lt;fileName&gt; with the exact migration file name\nnode phantom-api/src/migration-cli.ts apply &lt;fileName&gt;\n</code></pre> <p>Replace <code>&lt;fileName&gt;</code> with the exact name of the migration file (e.g., <code>20231027103000_create_posts_table.ts</code>).</p> <p>Concrete Example:</p> Command<pre><code>npx phantom-migration apply 20231027103000_create_posts_table.ts\n</code></pre>"},{"location":"migrations/#best-practices","title":"Best Practices","text":"<ul> <li>Backend Running: Ensure the backend server is started and accessible when running these commands.</li> <li>Generate Before Applying: Always run <code>phantom-migration pull</code> after modifying the meta-definitions, before applying migrations.</li> <li>Review Migrations: Check the contents of generated files before applying them, especially in production.</li> <li>Preserve Order: Apply migrations in the order they were generated to maintain database consistency.</li> </ul>"},{"location":"policies/","title":"\ud83d\udee1\ufe0f Phantom API - Advanced Policies Management System","text":""},{"location":"policies/#overview","title":"Overview","text":"<p>The Phantom API Advanced Policies Management System replaces simple role-based access control with a comprehensive, flexible authorization framework. It supports multiple policy types, dynamic conditions, and fine-grained access control.</p>"},{"location":"policies/#key-features","title":"Key Features","text":"<ul> <li>Multiple Policy Types: Role-based, Attribute-based, and Custom policies</li> <li>Dynamic Evaluation: Real-time policy evaluation with contextual data</li> <li>Conditional Logic: Support for complex conditions and operators</li> <li>Priority System: Policy precedence and conflict resolution</li> <li>Admin Interface: Visual policy management and testing tools</li> <li>Template System: Pre-built policy templates for common scenarios</li> </ul>"},{"location":"policies/#supported-access-patterns","title":"Supported Access Patterns","text":"Pattern Description Use Case Role-Based (RBAC) Access based on user roles Basic organizational permissions Attribute-Based (ABAC) Access based on user/resource attributes Dynamic, context-aware permissions Custom Policies Complex business logic Advanced scenarios requiring custom rules"},{"location":"policies/#architecture","title":"Architecture","text":""},{"location":"policies/#core-components","title":"Core Components","text":"<pre><code>graph TD\n    A[API Request] --&gt; B[Auth Middleware]\n    B --&gt; C[Policy Evaluation Engine]\n    C --&gt; D[Policy Service]\n    D --&gt; E[Database Tables]\n    C --&gt; F[Evaluation Context]\n    F --&gt; G[User Context]\n    F --&gt; H[Resource Context]\n    F --&gt; I[Environment Context]\n    C --&gt; J[Decision: ALLOW/DENY]</code></pre>"},{"location":"policies/#policy-evaluation-flow","title":"Policy Evaluation Flow","text":"<ol> <li>Request Authentication: Verify JWT token and extract user information</li> <li>Context Building: Gather user, resource, environment, and request data</li> <li>Policy Retrieval: Load applicable policies for user/role</li> <li>Rule Evaluation: Process rules in priority order</li> <li>Condition Checking: Evaluate conditions against context</li> <li>Decision Making: Return ALLOW/DENY with reasoning</li> <li>Audit Logging: Record decision for compliance</li> </ol>"},{"location":"policies/#database-schema-overview","title":"Database Schema Overview","text":"<pre><code>-- Core policy definition\nPolicy: { id, name, description, type, rules, isActive, priority, createdBy, tags }\n\n-- Individual policy rules\nPolicyRule: { id, policyId, resource, action, effect, conditions, priority }\n\n-- User-specific policy assignments\nUserPolicy: { userId, policyId, assignedBy, expiresAt, context }\n\n-- Role-based policy assignments\nRolePolicy: { role, policyId, assignedBy, priority }\n</code></pre>"},{"location":"policies/#policy-types","title":"Policy Types","text":""},{"location":"policies/#1-role-based-policies-rbac","title":"1. Role-Based Policies (RBAC)","text":"<p>Simple role-based access control for organizational hierarchies.</p> <pre><code>{\n  \"name\": \"Admin Full Access\",\n  \"type\": \"ROLE_BASED\",\n  \"rules\": [\n    {\n      \"resource\": \"*\",\n      \"action\": \"*\",\n      \"effect\": \"ALLOW\",\n      \"priority\": 100,\n      \"isActive\": true\n    }\n  ],\n  \"isActive\": true,\n  \"priority\": 100\n}\n</code></pre> <p>Use Cases: - Basic admin/user/viewer roles - Department-based access - Simple hierarchical permissions</p>"},{"location":"policies/#2-attribute-based-policies-abac","title":"2. Attribute-Based Policies (ABAC)","text":"<p>Dynamic access control based on user and resource attributes.</p> <pre><code>{\n  \"name\": \"Owner Edit Policy\",\n  \"type\": \"ATTRIBUTE_BASED\",\n  \"rules\": [\n    {\n      \"resource\": \"User\",\n      \"action\": \"update\",\n      \"effect\": \"ALLOW\",\n      \"conditions\": [\n        {\n          \"field\": \"user.id\",\n          \"operator\": \"eq\",\n          \"value\": \"${resource.id}\",\n          \"context\": \"user\"\n        }\n      ],\n      \"priority\": 100,\n      \"isActive\": true\n    }\n  ]\n}\n</code></pre> <p>Use Cases: - Data ownership policies - Multi-tenant applications - Context-sensitive permissions</p>"},{"location":"policies/#3-custom-policies","title":"3. Custom Policies","text":"<p>Complex business logic with multiple conditions and advanced operators.</p> <pre><code>{\n  \"name\": \"Business Hours Access\",\n  \"type\": \"CUSTOM\",\n  \"rules\": [\n    {\n      \"resource\": \"*\",\n      \"action\": \"*\",\n      \"effect\": \"ALLOW\",\n      \"conditions\": [\n        {\n          \"field\": \"environment.timestamp\",\n          \"operator\": \"gte\",\n          \"value\": \"09:00\",\n          \"context\": \"environment\"\n        },\n        {\n          \"field\": \"environment.timestamp\",\n          \"operator\": \"lte\",\n          \"value\": \"17:00\",\n          \"context\": \"environment\"\n        },\n        {\n          \"field\": \"user.department\",\n          \"operator\": \"in\",\n          \"value\": [\"sales\", \"support\"],\n          \"context\": \"user\"\n        }\n      ],\n      \"priority\": 100,\n      \"isActive\": true\n    }\n  ]\n}\n</code></pre> <p>Use Cases: - Time-based restrictions - Geographic limitations - Complex business rules</p>"},{"location":"policies/#database-schema","title":"Database Schema","text":""},{"location":"policies/#tables-structure","title":"Tables Structure","text":""},{"location":"policies/#policy-table","title":"Policy Table","text":"<pre><code>CREATE TABLE Policy (\n  id TEXT PRIMARY KEY,\n  name TEXT UNIQUE NOT NULL,\n  description TEXT,\n  type TEXT CHECK(type IN ('ROLE_BASED', 'ATTRIBUTE_BASED', 'CUSTOM')) NOT NULL,\n  rules TEXT NOT NULL,  -- JSON array\n  isActive BOOLEAN DEFAULT TRUE,\n  priority INTEGER DEFAULT 100,\n  createdBy TEXT NOT NULL,\n  tags TEXT DEFAULT '[]',  -- JSON array\n  createdAt DATETIME DEFAULT CURRENT_TIMESTAMP,\n  updatedAt DATETIME DEFAULT CURRENT_TIMESTAMP\n);\n</code></pre>"},{"location":"policies/#policyrule-table","title":"PolicyRule Table","text":"<pre><code>CREATE TABLE PolicyRule (\n  id TEXT PRIMARY KEY,\n  policyId TEXT NOT NULL REFERENCES Policy(id) ON DELETE CASCADE,\n  resource TEXT NOT NULL,\n  action TEXT CHECK(action IN ('create', 'read', 'update', 'delete', 'list', 'export', 'import', '*')) NOT NULL,\n  effect TEXT CHECK(effect IN ('ALLOW', 'DENY')) DEFAULT 'ALLOW',\n  conditions TEXT DEFAULT '[]',  -- JSON array\n  priority INTEGER DEFAULT 100,\n  description TEXT,\n  isActive BOOLEAN DEFAULT TRUE,\n  createdAt DATETIME DEFAULT CURRENT_TIMESTAMP\n);\n</code></pre>"},{"location":"policies/#userpolicy-table","title":"UserPolicy Table","text":"<pre><code>CREATE TABLE UserPolicy (\n  id TEXT PRIMARY KEY,\n  userId TEXT NOT NULL,\n  policyId TEXT NOT NULL REFERENCES Policy(id) ON DELETE CASCADE,\n  assignedBy TEXT NOT NULL,\n  assignedAt DATETIME DEFAULT CURRENT_TIMESTAMP,\n  expiresAt DATETIME,\n  isActive BOOLEAN DEFAULT TRUE,\n  context TEXT DEFAULT '{}',  -- JSON object\n  UNIQUE(userId, policyId)\n);\n</code></pre>"},{"location":"policies/#rolepolicy-table","title":"RolePolicy Table","text":"<pre><code>CREATE TABLE RolePolicy (\n  id TEXT PRIMARY KEY,\n  role TEXT CHECK(role IN ('anon', 'user', 'admin', 'moderator', 'viewer', 'editor')) NOT NULL,\n  policyId TEXT NOT NULL REFERENCES Policy(id) ON DELETE CASCADE,\n  assignedBy TEXT NOT NULL,\n  assignedAt DATETIME DEFAULT CURRENT_TIMESTAMP,\n  isActive BOOLEAN DEFAULT TRUE,\n  priority INTEGER DEFAULT 100,\n  UNIQUE(role, policyId)\n);\n</code></pre>"},{"location":"policies/#indexes-for-performance","title":"Indexes for Performance","text":"<pre><code>-- Policy table indexes\nCREATE INDEX idx_policy_type_active ON Policy(type, isActive);\nCREATE INDEX idx_policy_priority ON Policy(priority);\nCREATE INDEX idx_policy_name ON Policy(name);\n\n-- PolicyRule table indexes\nCREATE INDEX idx_rule_policy_resource_action ON PolicyRule(policyId, resource, action);\nCREATE INDEX idx_rule_resource_action_active ON PolicyRule(resource, action, isActive);\nCREATE INDEX idx_rule_priority_effect ON PolicyRule(priority, effect);\n\n-- UserPolicy table indexes\nCREATE INDEX idx_user_policy_user_active ON UserPolicy(userId, isActive);\nCREATE INDEX idx_user_policy_expires ON UserPolicy(expiresAt);\n\n-- RolePolicy table indexes\nCREATE INDEX idx_role_policy_role_active ON RolePolicy(role, isActive);\nCREATE INDEX idx_role_policy_priority ON RolePolicy(priority);\n</code></pre>"},{"location":"policies/#api-reference","title":"API Reference","text":""},{"location":"policies/#policy-management-endpoints","title":"Policy Management Endpoints","text":""},{"location":"policies/#get-all-policies","title":"Get All Policies","text":"<pre><code>GET /admin/api/policies?isActive=true&amp;type=ROLE_BASED\nAuthorization: Bearer &lt;admin_token&gt;\n\nResponse:\n{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": \"policy_123\",\n      \"name\": \"Admin Access\",\n      \"type\": \"ROLE_BASED\",\n      \"rules\": [...],\n      \"isActive\": true,\n      \"priority\": 100\n    }\n  ],\n  \"count\": 1\n}\n</code></pre>"},{"location":"policies/#create-policy","title":"Create Policy","text":"<pre><code>POST /admin/api/policies\nAuthorization: Bearer &lt;admin_token&gt;\nContent-Type: application/json\n\n{\n  \"name\": \"Editor Policy\",\n  \"description\": \"Content editing permissions\",\n  \"type\": \"ROLE_BASED\",\n  \"rules\": [\n    {\n      \"resource\": \"Article\",\n      \"action\": \"update\",\n      \"effect\": \"ALLOW\",\n      \"priority\": 100,\n      \"isActive\": true\n    }\n  ],\n  \"isActive\": true,\n  \"priority\": 100,\n  \"tags\": [\"content\", \"editing\"]\n}\n\nResponse:\n{\n  \"success\": true,\n  \"data\": { /* created policy */ },\n  \"message\": \"Policy created successfully\"\n}\n</code></pre>"},{"location":"policies/#update-policy","title":"Update Policy","text":"<pre><code>PUT /admin/api/policies/:id\nAuthorization: Bearer &lt;admin_token&gt;\nContent-Type: application/json\n\n{\n  \"name\": \"Updated Policy Name\",\n  \"isActive\": false\n}\n</code></pre>"},{"location":"policies/#delete-policy","title":"Delete Policy","text":"<pre><code>DELETE /admin/api/policies/:id\nAuthorization: Bearer &lt;admin_token&gt;\n\nResponse:\n{\n  \"success\": true,\n  \"message\": \"Policy deleted successfully\"\n}\n</code></pre>"},{"location":"policies/#policy-assignment-endpoints","title":"Policy Assignment Endpoints","text":""},{"location":"policies/#assign-policy-to-user","title":"Assign Policy to User","text":"<pre><code>POST /admin/api/policies/:policyId/assign/user/:userId\nAuthorization: Bearer &lt;admin_token&gt;\nContent-Type: application/json\n\n{\n  \"expiresAt\": \"2025-12-31T23:59:59Z\"\n}\n</code></pre>"},{"location":"policies/#assign-policy-to-role","title":"Assign Policy to Role","text":"<pre><code>POST /admin/api/policies/:policyId/assign/role/:role\nAuthorization: Bearer &lt;admin_token&gt;\nContent-Type: application/json\n\n{\n  \"priority\": 150\n}\n</code></pre>"},{"location":"policies/#get-user-policies","title":"Get User Policies","text":"<pre><code>GET /admin/api/users/:userId/policies?role=user\nAuthorization: Bearer &lt;admin_token&gt;\n\nResponse:\n{\n  \"success\": true,\n  \"data\": [/* user's policies */],\n  \"count\": 3\n}\n</code></pre>"},{"location":"policies/#policy-testing-endpoints","title":"Policy Testing Endpoints","text":""},{"location":"policies/#test-access","title":"Test Access","text":"<pre><code>POST /admin/api/policies/test-access\nAuthorization: Bearer &lt;admin_token&gt;\nContent-Type: application/json\n\n{\n  \"user\": {\n    \"id\": \"user_123\",\n    \"role\": \"user\",\n    \"email\": \"user@example.com\"\n  },\n  \"resource\": {\n    \"name\": \"Article\",\n    \"id\": \"article_456\"\n  },\n  \"action\": \"update\",\n  \"environment\": {\n    \"timestamp\": \"2025-07-04T14:30:00Z\",\n    \"ip\": \"192.168.1.1\"\n  }\n}\n\nResponse:\n{\n  \"success\": true,\n  \"data\": {\n    \"allowed\": true,\n    \"reason\": \"Policy 'Editor Access' rule matched: Article:update\",\n    \"matchedPolicy\": {\n      \"id\": \"policy_123\",\n      \"name\": \"Editor Access\"\n    }\n  }\n}\n</code></pre>"},{"location":"policies/#test-specific-policy","title":"Test Specific Policy","text":"<pre><code>POST /admin/api/policies/:id/test\nAuthorization: Bearer &lt;admin_token&gt;\nContent-Type: application/json\n\n{\n  \"user\": { /* user context */ },\n  \"resource\": { /* resource context */ },\n  \"action\": \"read\"\n}\n\nResponse:\n{\n  \"success\": true,\n  \"data\": {\n    \"allowed\": true,\n    \"reason\": \"Rule matched\",\n    \"evaluation\": {\n      \"matched\": true,\n      \"effect\": \"ALLOW\",\n      \"policy\": {\n        \"id\": \"policy_123\",\n        \"name\": \"Test Policy\",\n        \"type\": \"ROLE_BASED\"\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"policies/#analytics-endpoints","title":"Analytics Endpoints","text":""},{"location":"policies/#get-policy-analytics","title":"Get Policy Analytics","text":"<pre><code>GET /admin/api/policies-analytics?timeframe=7d\nAuthorization: Bearer &lt;admin_token&gt;\n\nResponse:\n{\n  \"success\": true,\n  \"data\": {\n    \"totalPolicies\": 15,\n    \"activePolicies\": 12,\n    \"policyTypes\": {\n      \"ROLE_BASED\": 8,\n      \"ATTRIBUTE_BASED\": 4,\n      \"CUSTOM\": 3\n    },\n    \"accessGrants\": 1250,\n    \"accessDenials\": 45,\n    \"recentActivity\": [...],\n    \"topResources\": [...]\n  }\n}\n</code></pre>"},{"location":"policies/#get-policy-templates","title":"Get Policy Templates","text":"<pre><code>GET /admin/api/policies-templates\nAuthorization: Bearer &lt;admin_token&gt;\n\nResponse:\n{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": \"role-based-basic\",\n      \"name\": \"Basic Role-Based Policy\",\n      \"description\": \"Simple role-based access control\",\n      \"type\": \"ROLE_BASED\",\n      \"template\": { /* policy template */ }\n    }\n  ]\n}\n</code></pre>"},{"location":"policies/#admin-interface","title":"Admin Interface","text":""},{"location":"policies/#policies-dashboard","title":"Policies Dashboard","text":"<p>The admin interface provides a comprehensive dashboard for managing policies:</p>"},{"location":"policies/#main-features","title":"Main Features","text":"<ol> <li>Policy List View</li> <li>Search and filter policies</li> <li>Quick enable/disable toggle</li> <li>Policy type and status indicators</li> <li> <p>Rules summary display</p> </li> <li> <p>Policy Creation Wizard</p> </li> <li>Step-by-step policy creation</li> <li>Template selection</li> <li>Rule builder with visual interface</li> <li> <p>Condition editor with autocomplete</p> </li> <li> <p>Policy Testing Interface</p> </li> <li>Interactive policy testing</li> <li>Context builder for evaluation</li> <li>Real-time results display</li> <li> <p>Policy simulation tools</p> </li> <li> <p>Analytics Dashboard</p> </li> <li>Policy usage statistics</li> <li>Access grant/denial metrics</li> <li>Policy type distribution</li> <li>Performance analytics</li> </ol>"},{"location":"policies/#navigation-structure","title":"Navigation Structure","text":"<pre><code>Admin Panel\n\u251c\u2500\u2500 Dashboard\n\u251c\u2500\u2500 Data Management\n\u2502   \u251c\u2500\u2500 Tables\n\u2502   \u2514\u2500\u2500 Users\n\u251c\u2500\u2500 Security &amp; Access\n\u2502   \u251c\u2500\u2500 \ud83c\udd95 Policies \u2190 New Section\n\u2502   \u251c\u2500\u2500 API Tokens\n\u2502   \u2514\u2500\u2500 Logs\n\u2514\u2500\u2500 Tools\n</code></pre>"},{"location":"policies/#policy-management-workflow","title":"Policy Management Workflow","text":"<ol> <li> <p>Create Policy <pre><code>Policies \u2192 Create Policy \u2192 Select Template \u2192 Configure Rules \u2192 Test \u2192 Deploy\n</code></pre></p> </li> <li> <p>Assign Policies <pre><code>Policies \u2192 Select Policy \u2192 Assign \u2192 Choose User/Role \u2192 Set Expiration \u2192 Confirm\n</code></pre></p> </li> <li> <p>Test Access <pre><code>Policies \u2192 Test Access \u2192 Set Context \u2192 Run Evaluation \u2192 View Results\n</code></pre></p> </li> <li> <p>Monitor Usage <pre><code>Policies \u2192 Analytics \u2192 View Metrics \u2192 Export Reports\n</code></pre></p> </li> </ol>"},{"location":"policies/#implementation-examples","title":"Implementation Examples","text":""},{"location":"policies/#basic-role-based-setup","title":"Basic Role-Based Setup","text":"<pre><code>// 1. Create basic role policies\nconst adminPolicy = await policyService.createPolicy({\n  name: \"Admin Full Access\",\n  type: \"ROLE_BASED\",\n  rules: [\n    {\n      resource: \"*\",\n      action: \"*\",\n      effect: \"ALLOW\",\n      priority: 100,\n      isActive: true\n    }\n  ],\n  isActive: true,\n  priority: 100,\n  createdBy: \"system\"\n});\n\n// 2. Assign to admin role\nawait policyService.assignPolicyToRole(\"admin\", adminPolicy.id!, \"system\");\n\n// 3. Use in middleware\napp.use('/admin/*', policyAuth('*', '*'));\n</code></pre>"},{"location":"policies/#attribute-based-user-ownership","title":"Attribute-Based User Ownership","text":"<pre><code>// 1. Create ownership policy\nconst ownershipPolicy = await policyService.createPolicy({\n  name: \"User Data Ownership\",\n  type: \"ATTRIBUTE_BASED\",\n  rules: [\n    {\n      resource: \"User\",\n      action: \"update\",\n      effect: \"ALLOW\",\n      conditions: [\n        {\n          field: \"user.id\",\n          operator: \"eq\",\n          value: \"${resource.id}\",\n          context: \"user\"\n        }\n      ],\n      priority: 200,\n      isActive: true\n    }\n  ],\n  isActive: true,\n  priority: 200,\n  createdBy: \"system\"\n});\n\n// 2. Assign to user role\nawait policyService.assignPolicyToRole(\"user\", ownershipPolicy.id!, \"system\");\n</code></pre>"},{"location":"policies/#time-based-access-control","title":"Time-Based Access Control","text":"<pre><code>// Business hours policy\nconst businessHoursPolicy = await policyService.createPolicy({\n  name: \"Business Hours Only\",\n  type: \"CUSTOM\",\n  rules: [\n    {\n      resource: \"sensitive_data\",\n      action: \"*\",\n      effect: \"DENY\",\n      conditions: [\n        {\n          field: \"environment.hour\",\n          operator: \"lt\",\n          value: 9,\n          context: \"environment\"\n        }\n      ],\n      priority: 300,\n      isActive: true\n    },\n    {\n      resource: \"sensitive_data\",\n      action: \"*\",\n      effect: \"DENY\",\n      conditions: [\n        {\n          field: \"environment.hour\",\n          operator: \"gt\",\n          value: 17,\n          context: \"environment\"\n        }\n      ],\n      priority: 300,\n      isActive: true\n    }\n  ],\n  isActive: true,\n  priority: 300,\n  createdBy: \"system\"\n});\n</code></pre>"},{"location":"policies/#dynamic-resource-filtering","title":"Dynamic Resource Filtering","text":"<pre><code>// Use policy filtering in controllers\napp.get('/api/users', async (req, res) =&gt; {\n  // Get all users\n  const allUsers = await tableManager.findAll('User');\n\n  // Filter based on user policies\n  const filteredUsers = await policyFilter(req, allUsers, 'User');\n\n  res.json({ data: filteredUsers });\n});\n</code></pre>"},{"location":"policies/#migration-guide","title":"Migration Guide","text":""},{"location":"policies/#from-simple-role-based-to-advanced-policies","title":"From Simple Role-Based to Advanced Policies","text":""},{"location":"policies/#step-1-backup-current-configuration","title":"Step 1: Backup Current Configuration","text":"<pre><code># Export current metadata\ncp -r backend/meta backend/meta.backup\n\n# Backup database\ncp backend/data/phantom.db backend/data/phantom.db.backup\n</code></pre>"},{"location":"policies/#step-2-run-database-migration","title":"Step 2: Run Database Migration","text":"<pre><code>// Migration script (automatic with new tables)\n// PolicyService will create tables automatically when first used\n</code></pre>"},{"location":"policies/#step-3-migrate-existing-permissions","title":"Step 3: Migrate Existing Permissions","text":"<pre><code>// Convert old metadata permissions to policies\nconst migrationScript = async () =&gt; {\n  const metaFiles = await fs.readdir('backend/meta');\n\n  for (const file of metaFiles) {\n    if (!file.endsWith('.json')) continue;\n\n    const meta = JSON.parse(await fs.readFile(`backend/meta/${file}`, 'utf8'));\n    const resourceName = path.basename(file, '.json');\n\n    if (meta.permissions) {\n      // Create policies for each permission\n      for (const [action, roles] of Object.entries(meta.permissions)) {\n        const policy = await policyService.createPolicy({\n          name: `${resourceName} ${action} Policy`,\n          type: \"ROLE_BASED\",\n          rules: [\n            {\n              resource: resourceName,\n              action: action,\n              effect: \"ALLOW\",\n              priority: 100,\n              isActive: true\n            }\n          ],\n          isActive: true,\n          priority: 100,\n          createdBy: \"migration\"\n        });\n\n        // Assign to roles\n        for (const role of roles) {\n          await policyService.assignPolicyToRole(role, policy.id!, \"migration\");\n        }\n      }\n    }\n  }\n};\n</code></pre>"},{"location":"policies/#step-4-update-middleware-usage","title":"Step 4: Update Middleware Usage","text":"<pre><code>// Old approach\napp.use('/api/:resource/:action', requireRole(['admin', 'user']));\n\n// New approach\napp.use('/api/:resource/:action', dynamicPolicyAuth(':action'));\n</code></pre>"},{"location":"policies/#step-5-test-migration","title":"Step 5: Test Migration","text":"<pre><code>// Test access with new system\nconst testContext = {\n  user: { id: 'user_123', role: 'user' },\n  resource: { name: 'User', id: 'user_123' },\n  action: 'read'\n};\n\nconst result = await policyService.evaluateAccess(testContext);\nconsole.log('Access allowed:', result.allowed);\n</code></pre>"},{"location":"policies/#best-practices","title":"Best Practices","text":""},{"location":"policies/#policy-design","title":"Policy Design","text":"<ol> <li> <p>Use Descriptive Names <pre><code>// Good\nname: \"Article Authors Can Edit Own Content\"\n\n// Bad\nname: \"Policy 1\"\n</code></pre></p> </li> <li> <p>Set Appropriate Priorities <pre><code>// Security policies (high priority)\npriority: 900\n\n// Business logic (medium priority)\npriority: 500\n\n// Default permissions (low priority)\npriority: 100\n</code></pre></p> </li> <li> <p>Use Specific Resources When Possible <pre><code>// Good\nresource: \"Article\"\n\n// Use sparingly\nresource: \"*\"\n</code></pre></p> </li> </ol>"},{"location":"policies/#performance-optimization","title":"Performance Optimization","text":"<ol> <li> <p>Index Critical Fields <pre><code>CREATE INDEX idx_user_role_active ON UserPolicy(userId, isActive);\n</code></pre></p> </li> <li> <p>Cache Policy Evaluations <pre><code>// Implement caching in production\nconst cacheKey = `policy:${userId}:${resource}:${action}`;\nconst cached = await cache.get(cacheKey);\nif (cached) return cached;\n</code></pre></p> </li> <li> <p>Limit Policy Complexity <pre><code>// Avoid too many conditions per rule\nconditions: [...] // Keep under 5 conditions per rule\n</code></pre></p> </li> </ol>"},{"location":"policies/#security-considerations","title":"Security Considerations","text":"<ol> <li> <p>Always Use DENY for Security Policies <pre><code>{\n  resource: \"sensitive_data\",\n  action: \"*\",\n  effect: \"DENY\", // Explicit deny\n  conditions: [...]\n}\n</code></pre></p> </li> <li> <p>Validate Input Data <pre><code>// Always validate policy data before creation\nconst validation = await policyApiService.validatePolicy(policyData);\nif (!validation.valid) {\n  throw new Error(validation.errors.join(', '));\n}\n</code></pre></p> </li> <li> <p>Audit Policy Changes <pre><code>// Log all policy modifications\nlogger.info({\n  action: 'policy_created',\n  policyId: policy.id,\n  createdBy: req.user.id,\n  timestamp: new Date()\n});\n</code></pre></p> </li> </ol>"},{"location":"policies/#testing-strategies","title":"Testing Strategies","text":"<ol> <li> <p>Unit Test Policy Logic <pre><code>describe('Policy Evaluation', () =&gt; {\n  it('should allow owner to edit own data', async () =&gt; {\n    const context = {\n      user: { id: 'user_123', role: 'user' },\n      resource: { name: 'User', id: 'user_123' },\n      action: 'update'\n    };\n\n    const result = await policyService.evaluateAccess(context);\n    expect(result.allowed).toBe(true);\n  });\n});\n</code></pre></p> </li> <li> <p>Integration Testing <pre><code>// Test end-to-end policy enforcement\nconst response = await request(app)\n  .put('/api/User/user_123')\n  .set('Authorization', `Bearer ${userToken}`)\n  .send({ name: 'Updated Name' });\n\nexpect(response.status).toBe(200);\n</code></pre></p> </li> <li> <p>Performance Testing <pre><code>// Test policy evaluation performance\nconsole.time('Policy Evaluation');\nawait policyService.evaluateAccess(context);\nconsole.timeEnd('Policy Evaluation'); // Should be &lt; 50ms\n</code></pre></p> </li> </ol>"},{"location":"policies/#troubleshooting","title":"Troubleshooting","text":""},{"location":"policies/#common-issues","title":"Common Issues","text":""},{"location":"policies/#issue-no-policies-found-for-user","title":"Issue: \"No policies found for user\"","text":"<pre><code>Symptoms: All requests denied with \"No policies found\"\nCause: User has no policies assigned to their role or user ID\nSolution: Assign at least one policy to the user's role\n</code></pre> <pre><code>// Check user policies\nconst policies = await policyService.getUserPolicies(userId, userRole);\nconsole.log('User policies:', policies.length);\n\n// Assign default policy if needed\nawait policyService.assignPolicyToRole(userRole, defaultPolicyId, 'system');\n</code></pre>"},{"location":"policies/#issue-policy-evaluation-timeout","title":"Issue: \"Policy evaluation timeout\"","text":"<pre><code>Symptoms: Slow response times or timeouts\nCause: Complex policies with many conditions\nSolution: Optimize policies and add database indexes\n</code></pre> <pre><code>// Add indexes for performance\nCREATE INDEX idx_policy_evaluation ON UserPolicy(userId, isActive);\nCREATE INDEX idx_rule_lookup ON PolicyRule(resource, action, isActive);\n\n// Simplify complex policies\n// Instead of one policy with 20 conditions, create multiple simpler policies\n</code></pre>"},{"location":"policies/#issue-conflicting-policy-results","title":"Issue: \"Conflicting policy results\"","text":"<pre><code>Symptoms: Inconsistent access decisions\nCause: Multiple policies with different effects\nSolution: Use priority system and explicit DENY policies\n</code></pre> <pre><code>// High priority DENY policy\n{\n  priority: 900,\n  effect: \"DENY\",\n  // ... conditions\n}\n\n// Lower priority ALLOW policy\n{\n  priority: 100,\n  effect: \"ALLOW\",\n  // ... conditions\n}\n</code></pre>"},{"location":"policies/#debug-tools","title":"Debug Tools","text":""},{"location":"policies/#enable-debug-logging","title":"Enable Debug Logging","text":"<pre><code>// In policyService.ts\nlogger.debug({\n  userId: context.user.id,\n  resource: context.resource.name,\n  action: context.action,\n  policies: policies.map(p =&gt; p.name),\n  evaluation: result\n}, 'Policy evaluation debug');\n</code></pre>"},{"location":"policies/#test-policy-in-isolation","title":"Test Policy in Isolation","text":"<pre><code>// Test specific policy\nconst testResult = await policyService.testPolicy(policyId, context);\nconsole.log('Policy test result:', testResult);\n</code></pre>"},{"location":"policies/#validate-policy-configuration","title":"Validate Policy Configuration","text":"<pre><code>// Check policy syntax\nconst validation = await policyApiService.validatePolicy(policy);\nif (!validation.valid) {\n  console.error('Policy validation errors:', validation.errors);\n}\n</code></pre>"},{"location":"policies/#performance-monitoring","title":"Performance Monitoring","text":"<pre><code>// Add performance metrics\nconst startTime = Date.now();\nconst result = await policyService.evaluateAccess(context);\nconst duration = Date.now() - startTime;\n\nlogger.info({\n  duration,\n  userId: context.user.id,\n  resource: context.resource.name,\n  action: context.action,\n  allowed: result.allowed\n}, 'Policy evaluation performance');\n</code></pre>"},{"location":"policies/#support-and-maintenance","title":"Support and Maintenance","text":""},{"location":"policies/#monitoring-policy-performance","title":"Monitoring Policy Performance","text":"<ol> <li> <p>Database Query Performance <pre><code>EXPLAIN QUERY PLAN SELECT * FROM Policy WHERE isActive = 1;\n</code></pre></p> </li> <li> <p>Policy Evaluation Metrics <pre><code>// Track evaluation times\nconst metrics = {\n  averageEvaluationTime: 45, // ms\n  evaluationsPerMinute: 150,\n  cacheHitRate: 0.85\n};\n</code></pre></p> </li> <li> <p>Access Pattern Analysis <pre><code>// Most accessed resources\nconst topResources = [\n  { resource: 'User', requests: 1250 },\n  { resource: 'Article', requests: 890 },\n  { resource: 'Comment', requests: 445 }\n];\n</code></pre></p> </li> </ol>"},{"location":"policies/#regular-maintenance-tasks","title":"Regular Maintenance Tasks","text":"<ol> <li> <p>Cleanup Expired Policies <pre><code>DELETE FROM UserPolicy WHERE expiresAt &lt; CURRENT_TIMESTAMP;\n</code></pre></p> </li> <li> <p>Archive Inactive Policies <pre><code>UPDATE Policy SET isActive = 0 WHERE updatedAt &lt; date('now', '-90 days');\n</code></pre></p> </li> <li> <p>Optimize Database <pre><code>ANALYZE; -- Update SQLite statistics\nVACUUM; -- Defragment database\n</code></pre></p> </li> </ol> <p>\ud83c\udf89 Congratulations! You now have a comprehensive advanced policies management system integrated into Phantom API. The system provides enterprise-grade authorization capabilities while maintaining the simplicity and flexibility that makes Phantom API unique.</p> <p>For additional support or advanced configurations, please refer to the main Phantom API documentation or contact the development team.</p>"},{"location":"relationships/","title":"Managing Relationships","text":"<p>Phantom API supports defining relationships between your resources, similar to foreign keys in a relational database. This allows you to link resources together (e.g., a Post belongs to a User).</p>"},{"location":"relationships/#defining-a-relationship","title":"Defining a Relationship","text":"<p>To define a relationship, you use the <code>relation</code> type in your resource meta-definition JSON file. This creates a foreign key relationship in the underlying database.</p> <p>For example, let's define a <code>Post</code> resource that belongs to a <code>User</code>. First, ensure you have a <code>phantom-api-backend/meta/User.json</code> file defining your <code>User</code> resource. Then, create or update <code>phantom-api-backend/meta/Post.json</code> as follows:</p> <pre><code>{\n  \"fields\": {\n    \"title\": { \"type\": \"string\", \"required\": true },\n    \"content\": { \"type\": \"text\" },\n    \"published\": { \"type\": \"boolean\", \"default\": false },\n    \"author\": {\n      \"type\": \"relation\",\n      \"target\": \"User\",\n      \"onDelete\": \"CASCADE\"\n    }\n  }\n}\n</code></pre> <p>Explanation of <code>relation</code> properties: - <code>\"type\": \"relation\"</code>: This explicitly marks the field as a relationship. - <code>\"target\": \"User\"</code>: This specifies the name of the target resource (e.g., <code>User</code>) to which this resource is related. The target resource must have its own meta-definition file (e.g., <code>phantom-api-backend/meta/User.json</code>). - <code>\"onDelete\": \"CASCADE\"</code>: (Optional) This defines the action to take when the related (parent) record is deleted. Common options include:     - <code>\"CASCADE\"</code>: If the parent record is deleted, all related child records are also deleted.     - <code>\"SET NULL\"</code>: If the parent record is deleted, the foreign key in the child record is set to <code>NULL</code>.     - <code>\"RESTRICT\"</code>: Prevents the deletion of the parent record if there are any related child records.</p>"},{"location":"relationships/#api-usage-examples","title":"API Usage Examples","text":""},{"location":"relationships/#creating-a-related-resource","title":"Creating a Related Resource","text":"<p>When creating a resource that has a relationship, you provide the <code>id</code> of the related (parent) resource in the relationship field. The backend will automatically validate the existence of the parent resource.</p> <p>Example: Creating a new <code>Post</code> associated with an existing <code>User</code></p> <p>Assume you have a <code>User</code> with <code>id: \"user_12345\"</code>.</p> <pre><code>curl -X POST \\\n  http://localhost:3000/api/Post/create \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer &lt;YOUR_JWT_TOKEN&gt;\" \\\n  -d '{ \"title\": \"My First Post\", \"content\": \"This is the content of my first post.\", \"author\": \"user_12345\" }'\n</code></pre> <p>In this example, <code>\"author\": \"user_12345\"</code> links the new post to the user with that specific ID.</p>"},{"location":"relationships/#populating-relationships-retrieving-related-data","title":"Populating Relationships (Retrieving Related Data)","text":"<p>When retrieving resources, you can use the <code>populate</code> query parameter to include the full related object(s) in the response instead of just their IDs. This is useful for fetching all necessary data in a single API call.</p> <p>Example: Retrieving a <code>Post</code> and its <code>author</code> details</p> <p>To get a post and include the full <code>User</code> object for its <code>author</code> field, you would make a <code>POST</code> request to <code>/api/Post/find</code> (or <code>findMany</code>) and include the <code>populate</code> option in the request body:</p> <pre><code>curl -X POST \\\n  http://localhost:3000/api/Post/find \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer &lt;YOUR_JWT_TOKEN&gt;\" \\\n  -d '{ \"where\": { \"id\": \"post_67890\" }, \"populate\": [\"author\"] }'\n</code></pre> <p>Expected Response:</p> <pre><code>{\n  \"id\": \"post_67890\",\n  \"title\": \"My First Post\",\n  \"content\": \"This is the content of my first post.\",\n  \"authorId\": \"user_12345\", // The foreign key field is still present\n  \"author\": {\n    \"id\": \"user_12345\",\n    \"name\": \"John Doe\",\n    \"email\": \"john.doe@example.com\"\n    // ... other user fields\n  }\n}\n</code></pre> <p>Populating Multiple Relationships:</p> <p>You can populate multiple relationships by including them in an array in the <code>populate</code> option:</p> <pre><code>curl -X POST \\\n  http://localhost:3000/api/Post/findMany \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer &lt;YOUR_JWT_TOKEN&gt;\" \\\n  -d '{ \"populate\": [\"author\", \"category\"] }'\n</code></pre> <p>This would include both the <code>author</code> and <code>category</code> objects in the response for each post, assuming you have a <code>category</code> relation defined in your <code>Post</code> meta-definition.</p> <p>```</p>"},{"location":"seeding/","title":"Database Seeding","text":"<p>This document explains how to generate and apply seed data for your database.</p>"},{"location":"seeding/#phantom-seed-generate","title":"<code>phantom-seed generate</code>","text":"<p>This command triggers the backend to generate a TypeScript file with random, coherent data based on your resource meta-definitions (<code>phantom-api-backend/meta/*.json</code>). This is incredibly useful for quickly populating your development database with sample data for testing and development purposes.</p> <p>Usage Example:</p> <pre><code>npx phantom-seed generate\n</code></pre> <p>Expected Behavior:</p> <p>When you execute this command, the <code>phantom-api</code> CLI sends a request to your running backend server. The backend then performs the following actions: 1. It reads all your defined resource meta-definitions from the <code>phantom-api-backend/meta/</code> directory. 2. It intelligently generates sample data for each resource, respecting the field types (e.g., string, number, boolean) and basic relationships you've defined. 3. Finally, it creates a new TypeScript file in the <code>phantom-api-backend/seeds/</code> directory. This file contains a <code>seed</code> function that, when executed, will insert the generated data into your database.</p> <p>Example of a Generated Seed File (<code>phantom-api-backend/seeds/YYYYMMDDHHmmss_generated_seed.ts</code>):</p> <pre><code>// This file is automatically generated by the backend.\n// Do not modify it manually unless you know what you are doing.\n\nexport const seed = async (tableManager: any) =&gt; {\n  console.log('Applying generated seed data...');\n\n  // Example: Seeding User records\n  for (const record of [\n    { id: \"user_1\", name: \"Alice Smith\", email: \"alice.smith@example.com\" },\n    { id: \"user_2\", name: \"Bob Johnson\", email: \"bob.johnson@example.com\" },\n    // ... more generated user data\n  ]) {\n    try {\n      await tableManager.create(`User`, record);\n      console.log(`  Created User with ID: ${record.id}`);\n    } catch (error) {\n      console.error(`  Failed to create User record ${record.id}: ${(error as Error).message}`);\n    }\n  }\n\n  // Example: Seeding Post records (assuming a relation to User)\n  for (const record of [\n    { id: \"post_1\", title: \"Hello World\", content: \"First post content.\", author: \"user_1\" },\n    { id: \"post_2\", title: \"Another Post\", content: \"Second post content.\", author: \"user_2\" },\n    // ... more generated post data\n  ]) {\n    try {\n      await tableManager.create(`Post`, record);\n      console.log(`  Created Post with ID: ${record.id}`);\n    } catch (error) {\n      console.error(`  Failed to create Post record ${record.id}: ${(error as Error).message}`);\n    }\n  }\n\n  console.log('Generated seed data applied.');\n};\n</code></pre>"},{"location":"seeding/#appliquer-des-donnees-de-test","title":"Appliquer des donn\u00e9es de test","text":"<p>Cette commande envoie une requ\u00eate au backend pour appliquer un fichier de \"seed\" sp\u00e9cifique \u00e0 votre base de donn\u00e9es.</p> <p>Exemple d\u2019utilisation\u00a0:</p> <pre><code># Remplacer &lt;fileName&gt; par le nom du fichier de seed\nnode phantom-api/src/seed-cli.ts apply &lt;fileName&gt;\n</code></pre> <ul> <li>Replace <code>&lt;fileName&gt;</code> with the exact name of the seed file you wish to apply (e.g., <code>20231027103000_generated_seed.ts</code>).</li> </ul> <p>Concrete Example:</p> <p>Let's assume you have a generated seed file named <code>20231027103000_generated_seed.ts</code>.</p> <pre><code>npx phantom-seed apply 20231027103000_generated_seed.ts\n</code></pre> <p>Important Notes: - Backend Server: Your backend server must be running and accessible for these commands to work, as the CLI communicates with it. - Data Duplication: Running <code>phantom-seed apply</code> multiple times with the same seed file will insert new records each time. This can lead to duplicate data unless your database schema has unique constraints defined (e.g., unique email addresses). - Fresh Dataset: If you need a fresh dataset, it's often recommended to clear your database or specific tables before applying seed data. You can achieve this by dropping and recreating your database or by implementing a custom cleanup script.</p>"},{"location":"self-host-docker/","title":"\ud83d\udc33 Self Hosting with Docker","text":"<p>The Phantom API backend can be deployed using Docker for consistent and portable execution across different environments.</p>"},{"location":"self-host-docker/#features","title":"Features","text":"<ul> <li>Containerized Backend: Complete backend API in a Docker container</li> <li>Persistent Storage: SQLite database persisted via Docker volumes</li> <li>Production Ready: Optimized multi-stage build for security and performance</li> <li>Multi-service Support: Backend, admin interface, and database</li> <li>Port Configuration: Configurable port mapping (default: 3000)</li> <li>Health Monitoring: Built-in health checks and logging</li> </ul>"},{"location":"self-host-docker/#docker-configuration","title":"Docker Configuration","text":"<ul> <li>Image publi\u00e9e: <code>docker.io/salnika/phantom-api.dev:latest</code></li> <li>Base Image: <code>node:22-alpine</code> (pour build custom, voir Dockerfile)</li> <li>Multi-stage Build: Optimis\u00e9 pour la production avec build s\u00e9par\u00e9 (si build local)</li> <li>S\u00e9curit\u00e9: Ex\u00e9cution utilisateur non-root</li> <li>Volume Mapping: <code>/app/data</code> pour la persistance SQLite</li> <li>Health Checks: Monitoring int\u00e9gr\u00e9</li> <li>Variables d'environnement: Configurables via <code>.env</code></li> </ul>"},{"location":"self-host-docker/#quick-start","title":"Quick Start","text":""},{"location":"self-host-docker/#prerequisites","title":"Prerequisites","text":"Docker RequirementsSystem Requirements <ul> <li>Docker and Docker Compose installed</li> <li>Git repository cloned locally</li> <li>Basic understanding of environment variables</li> </ul> <pre><code># Minimum requirements\n- Docker Engine 20.10+\n- Docker Compose 2.0+\n- 512MB RAM available\n- 2GB disk space\n</code></pre>"},{"location":"self-host-docker/#1-environment-setup","title":"1. Environment Setup","text":"Copy TemplateGenerate JWT Secret <pre><code># Copy environment template\ncp .env.example .env\n\n# Edit environment variables (REQUIRED)\nnano .env  # or your preferred editor\n</code></pre> <pre><code># Generate a secure JWT secret (32+ characters)\nopenssl rand -base64 32\n\n# Copy output to JWT_SECRET in .env file\n</code></pre> <p>\u26a0\ufe0f Critical: Update these values in <code>.env</code>: - <code>JWT_SECRET</code> - Must be at least 32 characters - <code>ADMIN_EMAIL</code> - Your admin email - <code>ADMIN_PASSWORD</code> - Secure password</p>"},{"location":"self-host-docker/#2-build-and-start","title":"2. Build and Start","text":"Production ModeDevelopment Mode <pre><code># Use the published image from Docker Hub\n# (No local build required)\ndocker-compose up -d\n\n# Check status\ndocker-compose ps\n\n# View logs\ndocker-compose logs -f phantom-api\n</code></pre> <pre><code># For local development, build is possible\necho \"NODE_ENV=development\" &gt;&gt; .env\ndocker-compose up --build\n</code></pre>"},{"location":"self-host-docker/#3-verify-deployment","title":"3. Verify Deployment","text":"Health ChecksService Access <pre><code># Check container health\ndocker-compose ps\n\n# Test health endpoint\ncurl http://localhost:3000/health\n\n# View detailed logs\ndocker-compose logs phantom-api\n</code></pre> <ul> <li>Backend API: http://localhost:3000</li> <li>Admin Interface: http://localhost:3000/admin</li> <li>Health Check: http://localhost:3000/health</li> <li>API Documentation: http://localhost:3000/api/docs (if enabled)</li> </ul>"},{"location":"self-host-docker/#environment-configuration","title":"Environment Configuration","text":""},{"location":"self-host-docker/#required-variables","title":"Required Variables","text":"<pre><code># Security Configuration\nJWT_SECRET=your-super-secure-jwt-secret-at-least-32-characters-long\nADMIN_EMAIL=admin@yourcompany.com\nADMIN_PASSWORD=secure-admin-password\n\n# Server Configuration  \nNODE_ENV=production\nPORT=3000\nDB_PATH=/app/data/phantom.db\n</code></pre>"},{"location":"self-host-docker/#optional-variables","title":"Optional Variables","text":"<pre><code># CORS Configuration\nCORS_ORIGIN=http://localhost:5173,http://localhost:5174\n\n# Cookie Security\nCOOKIE_SECRET=your-cookie-secret-key-change-in-production\n\n# Container Configuration\nCOMPOSE_PROJECT_NAME=phantom-api\n</code></pre>"},{"location":"self-host-docker/#environment-specific-settings","title":"Environment-Specific Settings","text":"DevelopmentProduction <pre><code>NODE_ENV=development\nPORT=3000\nDB_PATH=./data/phantom.db\nCORS_ORIGIN=http://localhost:5173,http://localhost:5174,http://localhost:5175\n</code></pre> <pre><code>NODE_ENV=production\nPORT=3000\nDB_PATH=/app/data/phantom.db\nCORS_ORIGIN=https://yourdomain.com,https://admin.yourdomain.com\n</code></pre>"},{"location":"self-host-docker/#container-management","title":"Container Management","text":""},{"location":"self-host-docker/#basic-operations","title":"Basic Operations","text":"Start/Stop ServicesMonitoring <pre><code># Start services\ndocker-compose up -d\n\n# Stop services\ndocker-compose down\n\n# Restart services\ndocker-compose restart\n\n# Stop and remove volumes (\u26a0\ufe0f DELETES DATA)\ndocker-compose down -v\n</code></pre> <pre><code># View logs in real-time\ndocker-compose logs -f phantom-api\n\n# Check container status\ndocker-compose ps\n\n# View resource usage\ndocker stats phantom-api-backend\n\n# Inspect container\ndocker inspect phantom-api-backend\n</code></pre>"},{"location":"self-host-docker/#advanced-operations","title":"Advanced Operations","text":"Container Shell AccessLog Management <pre><code># Access container shell\ndocker-compose exec phantom-api sh\n\n# Run commands in container\ndocker-compose exec phantom-api node --version\ndocker-compose exec phantom-api ls -la /app/data\n</code></pre> <pre><code># View specific log levels\ndocker-compose logs phantom-api | grep ERROR\n\n# Export logs\ndocker-compose logs phantom-api &gt; phantom-api.log\n\n# Clear logs (restart container)\ndocker-compose restart phantom-api\n</code></pre>"},{"location":"self-host-docker/#data-persistence","title":"Data Persistence","text":""},{"location":"self-host-docker/#database-management","title":"Database Management","text":"Backup OperationsRestore Operations <pre><code># Create manual backup\ndocker-compose exec phantom-api cp /app/data/phantom.db /app/data/backup-$(date +%Y%m%d).db\n\n# Copy backup to host\ndocker cp phantom-api-backend:/app/data/backup-$(date +%Y%m%d).db ./backups/\n\n# List backups\ndocker-compose exec phantom-api ls -la /app/data/*.db\n</code></pre> <pre><code># Stop service\ndocker-compose stop phantom-api\n\n# Restore from backup\ndocker cp ./backups/backup-20241201.db phantom-api-backend:/app/data/phantom.db\n\n# Start service\ndocker-compose start phantom-api\n</code></pre>"},{"location":"self-host-docker/#volume-management","title":"Volume Management","text":"Volume InspectionVolume Restore <pre><code># List volumes\ndocker volume ls\n\n# Inspect data volume\ndocker volume inspect phantom-api_phantom-data\n\n# Backup entire volume\ndocker run --rm -v phantom-api_phantom-data:/data -v $(pwd):/backup alpine tar czf /backup/data-backup.tar.gz -C /data .\n</code></pre> <pre><code># Restore volume from backup\ndocker run --rm -v phantom-api_phantom-data:/data -v $(pwd):/backup alpine tar xzf /backup/data-backup.tar.gz -C /data\n</code></pre>"},{"location":"self-host-docker/#production-deployment","title":"Production Deployment","text":""},{"location":"self-host-docker/#security-checklist","title":"Security Checklist","text":"Pre-DeploymentPost-Deployment <ul> <li> Changed <code>JWT_SECRET</code> to secure random string (32+ chars)</li> <li> Updated <code>ADMIN_EMAIL</code> and <code>ADMIN_PASSWORD</code></li> <li> Reviewed <code>CORS_ORIGIN</code> for production domains</li> <li> Set <code>NODE_ENV=production</code></li> <li> Configured HTTPS reverse proxy</li> <li> Set up automated backups</li> <li> Configured log rotation</li> </ul> <ul> <li> Verified health checks are passing</li> <li> Tested admin interface access</li> <li> Confirmed API endpoints respond correctly</li> <li> Validated database persistence</li> <li> Set up monitoring alerts</li> <li> Documented rollback procedures</li> </ul>"},{"location":"self-host-docker/#resource-configuration","title":"Resource Configuration","text":"Production LimitsMonitoring Setup <pre><code># Add to docker-compose.yml\nservices:\n  phantom-api:\n    deploy:\n      resources:\n        limits:\n          memory: 512M\n          cpus: '0.5'\n        reservations:\n          memory: 256M\n          cpus: '0.25'\n</code></pre> <pre><code># Health check configuration\nhealthcheck:\n  test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:3000/health\"]\n  interval: 30s\n  timeout: 10s\n  retries: 3\n  start_period: 40s\n</code></pre>"},{"location":"self-host-docker/#troubleshooting","title":"Troubleshooting","text":""},{"location":"self-host-docker/#common-issues","title":"Common Issues","text":"Startup ProblemsRuntime Issues <p>Container won't start: <pre><code># Check logs for errors\ndocker-compose logs phantom-api\n\n# Verify environment variables\ndocker-compose config\n\n# Check if port is available\nlsof -i :3000\n</code></pre></p> <p>Permission denied: <pre><code># Fix volume permissions\nsudo chown -R $(id -u):$(id -g) ./data\n\n# Reset container\ndocker-compose down &amp;&amp; docker-compose up --build\n</code></pre></p> <p>Database connection failed: <pre><code># Verify database file exists\ndocker-compose exec phantom-api ls -la /app/data/\n\n# Check database permissions\ndocker-compose exec phantom-api stat /app/data/phantom.db\n\n# Recreate database\ndocker-compose exec phantom-api rm /app/data/phantom.db\ndocker-compose restart phantom-api\n</code></pre></p> <p>API not responding: <pre><code># Check container health\ndocker-compose ps\n\n# Test internal connectivity\ndocker-compose exec phantom-api curl http://localhost:3000/health\n\n# Verify port mapping\ndocker port phantom-api-backend\n</code></pre></p>"},{"location":"self-host-docker/#reset-and-recovery","title":"Reset and Recovery","text":"Soft ResetHard Reset <pre><code># Restart services\ndocker-compose restart\n\n# Rebuild without cache\ndocker-compose build --no-cache\ndocker-compose up -d\n</code></pre> <pre><code># \u26a0\ufe0f WARNING: This will delete all data\n\n# Stop and remove everything\ndocker-compose down -v\n\n# Remove images\ndocker rmi phantom-api_phantom-api\n\n# Start fresh\ndocker-compose up --build -d\n</code></pre>"},{"location":"self-host-docker/#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"self-host-docker/#reverse-proxy-setup","title":"Reverse Proxy Setup","text":"Nginx ConfigurationTraefik Labels <pre><code>server {\n    listen 80;\n    server_name api.yourdomain.com;\n\n    location / {\n        proxy_pass http://localhost:3000;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n</code></pre> <pre><code># Add to docker-compose.yml\nlabels:\n  - \"traefik.enable=true\"\n  - \"traefik.http.routers.phantom-api.rule=Host(`api.yourdomain.com`)\"\n  - \"traefik.http.routers.phantom-api.tls=true\"\n  - \"traefik.http.routers.phantom-api.tls.certresolver=letsencrypt\"\n</code></pre>"},{"location":"self-host-docker/#multi-environment-setup","title":"Multi-Environment Setup","text":"DevelopmentProduction <pre><code># docker-compose.dev.yml\nversion: '3.8'\nservices:\n  phantom-api:\n    environment:\n      - NODE_ENV=development\n    volumes:\n      - ./backend:/app/backend:ro\n    command: [\"yarn\", \"dev\"]\n</code></pre> <pre><code># docker-compose.prod.yml\nversion: '3.8'\nservices:\n  phantom-api:\n    restart: unless-stopped\n    logging:\n      driver: \"json-file\"\n      options:\n        max-size: \"10m\"\n        max-file: \"3\"\n</code></pre>"}]}