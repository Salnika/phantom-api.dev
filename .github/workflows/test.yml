# .github/workflows/reusable-test.yml
name: Reusable Test

on:
  workflow_call:
    inputs:
      matrix:
        description: 'JSON matrix of workspaces to test'
        required: true
        type: string

env:
  NODE_VERSION: '20'
  YARN_VERSION: '4.9.2'
  JWT_SECRET: ${{ secrets.JWT_SECRET_TEST || 'test-secret-key-very-long-and-secure-for-testing-purposes-minimum-32-chars' }}
  NODE_ENV: test

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      yarn-cache-dir: ${{ steps.yarn-cache.outputs.dir }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Node.js & Yarn
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - run: corepack enable && corepack prepare yarn@${{ env.YARN_VERSION }} --activate

      - name: Get yarn cache directory
        id: yarn-cache
        run: echo "dir=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-


      - name: Install dependencies
        run: yarn install --immutable

      - name: Upload workspace artifact
        uses: actions/upload-artifact@v4
        with:
          name: workspace
          path: .

  run-checks:
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        workspace: ${{ fromJson(inputs.matrix) }}
    
    steps:
      - name: Download workspace artifact
        uses: actions/download-artifact@v4
        with:
          name: workspace
          path: .
      
      - name: Setup Node.js & Yarn
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - run: corepack enable && corepack prepare yarn@${{ env.YARN_VERSION }} --activate
      
      # Restaurer seulement le cache, pas besoin de réinstaller
      - name: Restore Yarn Cache
        uses: actions/cache@v4
        with:
          path: ${{ needs.setup.outputs.yarn-cache-dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Run Lint
        if: fromJson(matrix.workspace.scripts).lint
        run: yarn workspace ${{ matrix.workspace.name }} lint

      - name: Run TypeCheck
        if: fromJson(matrix.workspace.scripts).typecheck || fromJson(matrix.workspace.scripts).tsc
        run: yarn workspace ${{ matrix.workspace.name }} ${{ fromJson(matrix.workspace.scripts).typecheck && 'typecheck' || 'tsc' }} --noEmit

      - name: Run Knip
        if: fromJson(matrix.workspace.scripts).knip
        run: yarn workspace ${{ matrix.workspace.name }} knip

      - name: Run Tests
        if: fromJson(matrix.workspace.scripts).test || fromJson(matrix.workspace.scripts)['test:run']
        run: yarn workspace ${{ matrix.workspace.name }} ${{ matrix.workspace.config.testCommand || 'test' }}

      # La partie Codecov reste spécifique, on la garde avec une condition
      - name: Upload coverage to Codecov
        if: matrix.workspace.name == 'phantom-api-backend' && fromJson(matrix.workspace.scripts)['test:coverage']
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./${{ matrix.workspace.location }}/coverage/lcov.info
          flags: backend